plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name = "JEI Maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = 'TOP Maven'
        url = "https://maven.k-4u.nl"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modRuntimeOnly "mezz.jei:jei-1.18.2:${rootProject.jei_version}"
    modApi "mezz.jei:jei-1.18.2:${rootProject.jei_version}:api"

    modImplementation("mcjty.theoneprobe:theoneprobe:${rootProject.top_version}") { transitive false }

    modRuntimeOnly "curse.maven:jade-324717:${rootProject.jade_forge_version}"
    modApi "curse.maven:jade-api-324717:${rootProject.jade_forge_api_version}"

    //modCompileOnly "mcp.mobius.waila:wthit-api:forge-${rootProject.wthit_version}"
    //modRuntimeOnly "mcp.mobius.waila:wthit:forge-${rootProject.wthit_version}"
    //modRuntimeOnly "lol.bai:badpackets:forge-0.1.2"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}